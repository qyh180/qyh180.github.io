<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IP地址分类查询</title>
    <url>/2020/07/16/IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p><font face='宋体' size=4>查询IP地址的分类，并且对IP作一下检测：</p>
<a id="more"></a>
<p>1/ 格式是否符合；</p>
<p>2/ ip地址范围是否符合；<br>后续增加：</p>
<p>1/ 对私有地址分类再细分   –get；</p>
<p>2/ 封装成.exe；</p>
<p>3/ 代码结构优化；</p>
<p>通过了所有测试用例。太冗杂了，应该还可以优化</p>
<pre><code>start = time.time()
while True:
    ip = input(&quot;请输入IP地址:&quot;)
    # ip = &quot;250.11.22.33&quot;
    text = re.compile(r&quot;[0-9]$&quot;)
    if (&quot;.&quot; not in ip) or (ip.count(&quot;.&quot;) != 3) or (text.match(ip)):
        print(&quot;格式错误，请重新输入(例:192.168.0.1):&quot;)
        continue
    else:
        ip_list = ip.split(&quot;.&quot;)
        iplist = [int(x) for x in ip_list]
        if len(iplist) != 4:
            print(&quot;数量不对，请重新输入(例:192.168.0.1):&quot;)
            continue
        else:
            if (iplist[0] &lt;= 255 and iplist[0] &gt;= 0) and (iplist[1] &gt;= 0 and iplist[1] &lt;= 255) \
                    and (iplist[2] &gt;= 0 and iplist[2] &lt;= 255) \
                    and (iplist[3] &gt;= 0 and iplist[3] &lt;= 255):
                ackip = iplist
                break
            else:
                print(&quot;超过范围，请重新输入(例:192.168.0.1):&quot;)
                continue

if ackip[0] &lt;=255 and ackip[0] &gt; 0 and ackip[3]&lt;=254 and ackip[3]&gt;0:
    if ackip[0] &gt;= 1 and ackip[0] &lt;= 126:
        if ackip[0] == 10:
            print(&quot;此IP地址：%s 属于 A类私有地址&quot; % ip)
        else:
            print(&quot;此IP地址：%s 属于 A类地址&quot; % ip)
    elif ackip[0] ==127:
        print(&quot;此IP地址：%s 属于回环地址&quot; % ip)
    elif ackip[0] &gt;= 128 and ackip[0] &lt;= 191:
        if ackip[0] == 172 and (ackip[1] &lt;= 31 and ackip[1] &gt;= 16):
            print(&quot;此IP地址：%s 属于 B类私有地址&quot; % ip)
        elif ackip[0] == 169 and ackip[1] == 254:
            print(&quot;此IP地址：%s 属于 windows自动分配&quot; % ip)
        else:
            print(&quot;此IP地址：%s 属于 B类地址&quot; % ip)
    elif ackip[0] &gt;= 192 and ackip[0] &lt;= 223:
        if ackip[0] == 192 and ackip[1] == 168:
            print(&quot;此IP地址：%s 属于 C类私有地址&quot; % ip)
        else:
            print(&quot;此IP地址：%s 属于 C类地址&quot; % ip)
    elif ackip[0] &gt;= 224 and ackip[0] &lt;= 239:
        print(&quot;此IP地址：%s 属于 D类地址,不可用IP&quot; % ip)
    elif ackip[0] &gt;= 240 and ackip[0] &lt;= 255:
        print(&quot;此IP地址：%s 属于 E类地址,不可用IP&quot; % ip)
elif ackip[0] == 0 or ackip[3] == 0:
    print(&quot;此IP地址：%s 属于 全网地址，不可用IP&quot; % ip)
elif ackip[3] == 255:
    print(&quot;此IP地址：%s 属于 广播地址，不可用IP&quot; % ip)

end=time.time()
print(&quot;Running time: %s&quot; % (end-start))</code></pre>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning Data Mining With Python</title>
    <url>/2020/07/20/Python%20Mining/</url>
    <content><![CDATA[<h1 id="д��j��"><a href="#д��j��" class="headerlink" title="д��ǰ��"></a>д��ǰ��</h1><p>���ϵ��������ѧϰ�����ھ�ļ�¼�ɡ������ڸ��£����ݼ������ݶ��ǲο���Python�����ھ�������ʵ�����Ȿ�顣</p>
<h1 id="�׺��Է���������Ʒ�Ƽ�Ϊ����"><a href="#�׺��Է���������Ʒ�Ƽ�Ϊ����" class="headerlink" title="�׺��Է���������Ʒ�Ƽ�Ϊ����"></a>�׺��Է���������Ʒ�Ƽ�Ϊ����</h1><p><i class="fa fa-quote-left fa-2x fa-pull-left fa-border" aria-hidden="true"></i>��Ʒ���۴����°ᵽ���Ϻ󣬺ܶ�֮ǰ���˹���ɵĹ���ֻ��ʵ���Զ�������������������������������Ϊ�����������۳���Ӣ��up-selling��ָ�������Ѿ�������Ʒ�Ĺ˿�������һ����Ʒ��ԭ���������˹�����ɵ���Ʒ�Ƽ��������������������ھ���������ɣ�����ÿ����Ϊ�̼Ҷ���˼�����Ԫ��ǿ�����Ƶ�����������ķ�չ��</p>
<p>����һ���¼򵥵���Ʒ�Ƽ������������˼·��ʵ�ܺ����⣺����֮ǰ����ͬʱ�����������Ʒ���Ժ�Ҳ�ܿ��ܻ�ͬʱ���򡣸��뷨ȷʵ�ܼ򵥰ɣ�������Ǻܶ���Ʒ�Ƽ�����Ļ������������ϻ������¡�</p>
<p>�����뷨������ת��Ϊ�㷨���˿͹�����Ʒ�����������Ƽ���Ʒǰ���Ȳ�ѯһ����ʷ�������ݣ��ҵ��������ǹ���ͬ����Ʒ�Ľ������ݣ�����ͬʱ������ʲô���ٰ������Ƽ����˿ͼ��ɡ����㷨ʵ�ʱ���Ҳ���������ٱ�����Ƽ���Ʒ����Ч��</p>
<p>�����ﶨ��һ������<br>    ���һ����������ƷX����ô�����п��ܹ�����ƷY�����Ҳ����ʶ����Ʒ�Ĺ���</p>
<pre><code>import numpy as np
dataset_filename = &quot;affinity_dataset.txt&quot;
X = np.loadtxt(dataset_filename)</code></pre><p>�������ݿ�֮��������������ֱ���֧�ֶ�(support)�����Ŷ�(confidence)</p>
<p>֧�ֶ�ָ���ݼ��й���Ӧ��Ĵ�����Ҳ���ǹ�������������������Ĵ�����<br>���Ŷ���ָ�����׼ȷ����Σ����ڷ�������������ʾ��ǰ��������ֺͽ���һ�µı������١����㷽��Ϊ����ͳ�Ƶ�ǰ����ĳ��ִ��������������������������������䣩��ͬ�Ĺ���������</p>
<p>Ϊ�˼���֧�ֶȺ����Ŷȣ���Ҫͳ�����ݼ������й����������ݡ�����<strong>����Ӧ��</strong>��<strong>������Ч</strong>���������ֵ����ʽ���棬�����ֵ�ļ����������ͽ�����ɵ�Ԫ�飬Ԫ��Ԫ���������б��е�����ֵ��ʾ��</p>
<p>�����ֵ䣬��Ž��</p>
<pre><code>from collections import defaultdict
valid_rules = defaultdict(int)
invalid_rules = defaultdict(int)
num_occurances = defaultdict(int)</code></pre><ul>
<li><p><code>premise</code> ��ʾǰ������–�˿͹�����ĳһ����Ʒ��<code>num_occurances</code>��ʾ������ǰ�������Ĵ�����</p>
</li>
<li><p><code>conclusion</code> ��ʾ���</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for sample in X:</span><br><span class="line">    for premise in range(n_features):  # ��ÿ����������һ��</span><br><span class="line">        if sample[premise] &#x3D;&#x3D; 0: continue</span><br><span class="line">        num_occurances[premise] +&#x3D; 1</span><br><span class="line">        for conclusion in range(n_features):</span><br><span class="line">            if premise &#x3D;&#x3D; conclusion: continue  # ��������ͽ�����ͬ�ľ��������Է���û������</span><br><span class="line">            if sample[conclusion] &#x3D;&#x3D; 1:</span><br><span class="line">                valid_rules[(premise,conclusion)] +&#x3D; 1</span><br><span class="line">            else:</span><br><span class="line">                invalid_rules[(premise,conclusion)] +&#x3D; 1  # ͳ��ֻ����һ����Ʒ�Ĵ��������ǹ�����Ч</span><br><span class="line">support &#x3D; valid_rules       # ֧�ֶȾ��ǹ���Ӧ��Ĵ���</span><br><span class="line">confidence &#x3D; defaultdict(float)  # ���Ŷȵ��ֵ�</span><br><span class="line">for premise,conclusion in valid_rules.keys():  # ע�����ĸ������ĸ�</span><br><span class="line">    confidence[(premise,conclusion)] &#x3D; valid_rules[(premise,conclusion)]&#x2F;num_occurances[premise]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>����һ�����������ÿ��������֧�ֶȺ����Ŷȡ�</p>
<pre><code>def print_rule(premise, conclusion, support, confidence, features):
    premise_name = features[premise]
    conclusion_name = features[conclusion]
    print(&quot;Rule: If a person buys {0} they will also buy {1}&quot;.format(premise_name, conclusion_name))
    print(&quot; - Confidence: {0:.3f}&quot;.format(confidence[(premise, conclusion)]))
    print(&quot; - Support: {0}&quot;.format(support[(premise, conclusion)]))
    print(&quot;&quot;)</code></pre><p>�����ŶȽ�������Ȼ�����ǰ��Ĺ����������ֵ��items() �������ذ����ֵ�����Ԫ�ص��б�������ʹ��itemgetter() ����Ϊ���������Ϳ�<br>�Զ�Ƕ���б���������itemgetter(1) ��ʾ���ֵ��Ԫ�ص�ֵ������Ϊ֧�ֶȣ���Ϊ�������ݣ�reverse=True ��ʾ�������С�</p>
<pre><code>from operator import itemgetter
# ֧�ֶ�����
sorted_support = sorted(support.items(),key=itemgetter(1),reverse = True)
for index in range(5):
    premise,conclusion = sorted_support[index][0]
    print_rule(premise,conclusion,support,confidence,features)</code></pre><p>�������</p>
<pre><code>Rule: If a person buys cheese they will also buy bananas
 - Confidence: 0.659
 - Support: 27

Rule: If a person buys bananas they will also buy cheese
 - Confidence: 0.458
 - Support: 27

Rule: If a person buys cheese they will also buy apples
 - Confidence: 0.610
 - Support: 25

Rule: If a person buys apples they will also buy cheese
 - Confidence: 0.694
 - Support: 25

Rule: If a person buys apples they will also buy bananas
 - Confidence: 0.583
 - Support: 21</code></pre><p>�����Ŷ�����Ҳ��һ����</p>
<pre><code># ���Ŷ�����
sorted_confidence = sorted(confidence.items(),key=itemgetter(1),reverse=True)
for index in range(5):
    premise,conclusion = sorted_confidence[index][0]
    print_rule(premise,conclusion,support,confidence,features)</code></pre><p>�������</p>
<pre><code>Rule: If a person buys apples they will also buy cheese
 - Confidence: 0.694
 - Support: 25

Rule: If a person buys cheese they will also buy bananas
 - Confidence: 0.659
 - Support: 27

Rule: If a person buys bread they will also buy bananas
 - Confidence: 0.630
 - Support: 17

Rule: If a person buys cheese they will also buy apples
 - Confidence: 0.610
 - Support: 25

Rule: If a person buys apples they will also buy bananas
 - Confidence: 0.583
 - Support: 21</code></pre><h1 id="���̽��"><a href="#���̽��" class="headerlink" title="���̽��"></a>���̽��</h1><p>�������Ľ�����Կ��������˿���ƻ����Ҳ�������� ���͡��˿������ң�Ҳ�����㽶 ���������������֧�ֶȺ���<br>�Ŷȶ��ܸߡ����о������Ը�����Щ������������Ʒ�ڷ�λ�á���ƻ��������ʱ���Ա�Ҳһ��������ҡ������㽶�����Ҹ������ûɶ���ˡ�</p>
<head> 
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script> 
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script> 
</head> 
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data Mining</tag>
        <tag>Books</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium Serverʹ�����ã�һ��</title>
    <url>/2020/07/22/Selenium%20Grid/</url>
    <content><![CDATA[<h1 id="����Selenium-server��Ϊhub"><a href="#����Selenium-server��Ϊhub" class="headerlink" title="����Selenium server��Ϊhub"></a>����Selenium server��Ϊhub</h1><p><code>java -jar selenium-server-standalone-3.149.0.jar -port 4455 -role hub</code></p>
<p><code>-port 4455</code>�ǿ���4455�Ŷ˿�<code>-role hub</code>�ǽ�<code>Selenium server</code>��Ϊ<code>hub</code>����<code>Grid server</code></p>
<p>��ͼ��ʾ<br><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722200102.png" alt=""></p>
<h1 id="���������"><a href="#���������" class="headerlink" title="���������"></a>���������</h1><p>���������ַ������<code>loaclhost:4455/grid/console</code></p>
<p><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722200620.png" alt=""></p>
<h1 id="���ӽڵ�"><a href="#���ӽڵ�" class="headerlink" title="���ӽڵ�"></a>���ӽڵ�</h1><h2 id="yһ���ڵ�ʹ���һ̨�����"><a href="#yһ���ڵ�ʹ���һ̨�����" class="headerlink" title="ÿһ���ڵ�ʹ���һ̨�����"></a>ÿһ���ڵ�ʹ���һ̨�����</h2><p>�´�һ��cmd<br>����<code>java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-3.141.59.jar -role node -hub http://10.30.35.106:4455</code></p>
<p>����һ���ڵ㣬�����ͼ<br><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722202415.png" alt=""><br>ˢ�������</p>
<p><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722202558.png" alt=""></p>
<h2 id="���������ae�����ʹ��json�l����Զ���ڵ�"><a href="#���������ae�����ʹ��json�l����Զ���ڵ�" class="headerlink" title="���������ǣ�����ʹ��json�ļ����Զ���ڵ�"></a>���������ǣ�����ʹ��json�ļ����Զ���ڵ�</h2><p>cmd��������<code>java -jar selenium-server-standalone.jar -role node -nodeConfig nodeconfig.json</code><br><code>nodeConfig.json</code>�ļ�����</p>
<pre><code>{
  &quot;capabilities&quot;:
  [
    {
      &quot;browserName&quot;: &quot;firefox&quot;,
      &quot;maxInstances&quot;: 3,
      &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;
    },
    {
      &quot;browserName&quot;: &quot;chrome&quot;,
      &quot;maxInstances&quot;: 5,
      &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;
    },
    {
      &quot;browserName&quot;: &quot;internet explorer&quot;,
      &quot;maxInstances&quot;: 1,
      &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;
    }
  ],
  &quot;proxy&quot;: &quot;org.openqa.grid.selenium.proxy.DefaultRemoteProxy&quot;,
  &quot;maxSession&quot;: 5,
  &quot;port&quot;: 5555,
  &quot;register&quot;: true,
  &quot;registerCycle&quot;: 5000,
  &quot;hub&quot;: &quot;http://localhost:4455&quot;,
  &quot;nodeStatusCheckTimeout&quot;: 5000,
  &quot;nodePolling&quot;: 5000,
  &quot;role&quot;: &quot;node&quot;,
  &quot;unregisterIfStillDownAfter&quot;: 60000,
  &quot;downPollingLimit&quot;: 2,
  &quot;debug&quot;: false,
  &quot;servlets&quot; : [],
  &quot;withoutServlets&quot;: [],
  &quot;custom&quot;: {}
}</code></pre><p>������������������ַ<code>http://localhost:4455/grid/console</code>����Ϊjson�����õ�hub��<code>http://localhost:4455</code>��<br>�������</p>
<p><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722204600.png" alt=""><br>������1��IE��3�������5��Chrome��ע�⣬��Щ�ڵ�����<code>id : http://10.30.35.106:5555, OS : WIN10</code>�еĽڵ㣬ע��˿ںš�</p>
<h2 id="����Firefox�ڵ�"><a href="#����Firefox�ڵ�" class="headerlink" title="����Firefox�ڵ�"></a>����Firefox�ڵ�</h2><ol>
<li>��������һ��hub �˿���4444</li>
<li><code>java -jar selenium-server-standalone-3.141.59.jar -role webdriver -browser&quot;browserName=firefox,version=27,maxinstance=2,platform=WINDOWS&quot; -hubHost 10.30.35.106 �Cport 6677</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722210247.png" alt=""></p>
<h2 id="����Chrome�ڵ�"><a href="#����Chrome�ڵ�" class="headerlink" title="����Chrome�ڵ�"></a>����Chrome�ڵ�</h2><ol>
<li>���µ�cmd�����뵽 selenium-server-standalone-3.141.59.jar �����ļ���</li>
<li><code>java -jar selenium-server-standalone-13.141.59.jar -role webdriver -browser &quot;browserName=chrome,version=27,maxinstance=2,platform=WINDOWS&quot; -hubHost 10.30.35.106 �Cport 7777</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722210624.png" alt=""></p>
<p>��ʱ���ܹ��������˿��нڵ��ˡ����һ�º�����˼��<br><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722210913.png" alt=""></p>
<h2 id="��Mac-OS-������Safari"><a href="#��Mac-OS-������Safari" class="headerlink" title="��Mac OS ������Safari"></a>��Mac OS ������Safari</h2><ol>
<li>���µ�cmd�����뵽 selenium-server-standalone-3.141.59.jar �����ļ���</li>
<li><code>java -jar selenium-server-standalone-3.141.59.jar -role webdriver -browser &quot;browserName=safari,version=7,maxinstance=2,platform=MAC&quot; -hubHost 10.30.35.106 �Cport 7788</code></li>
</ol>
<p>��ʱ����һ��<br><img src="https://raw.githubusercontent.com/qyh180/figure/master/img/20200722211407.png" alt=""></p>
<p>����Ϊʲô��ʾUNKONW,����������о��о�</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown美化 font-awesome的使用</title>
    <url>/2020/07/16/%E4%BD%A0%E5%A5%BD/</url>
    <content><![CDATA[<p>经常看到别人文章中使用了很多好看的符号来对段落进行标注，今天特意去搜索了一下font-awesome的使用，符号库真的好丰富啊。</p>
<a id="more"></a>


<p><i class="fa fa-share-alt"></i> <a href="http://www.fontawesome.com.cn/icons" target="_blank" rel="noopener">font-awesome官方地址</a></p>
<h1 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h1><p>在Markdown中添加一下代码，放在文件的最底部。</p>
<pre><code>&lt;head&gt; 
    &lt;script defer src=&quot;https://use.fontawesome.com/releases/v5.0.13/js/all.js&quot;&gt;&lt;/script&gt; 
    &lt;script defer src=&quot;https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js&quot;&gt;&lt;/script&gt; 
&lt;/head&gt; 
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&quot;&gt;</code></pre><p>然后就可以在font-awesome官网找到合适的图标，使用方法是将<code>&lt;i class=&quot;fa fa-share-alt&quot;&gt;&lt;/i&gt;</code>放在你需要添加图标的地方。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><code>&lt;i class=&quot;fab fa-google&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</code> <i class="fab fa-google" aria-hidden="true"></i> 这是Google图标</p>
<h2 id="图标变大"><a href="#图标变大" class="headerlink" title="图标变大"></a>图标变大</h2><p><code>&lt;i class=&quot;fab fa-google fa-2x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</code><i class="fab fa-google fa-2x" aria-hidden="true"></i> 这是2倍大的Google图标，使用fa-2x</p>
<h2 id="图标旋转"><a href="#图标旋转" class="headerlink" title="图标旋转"></a>图标旋转</h2><p><code>&lt;i class=&quot;fab fa-google fa-2x fa-spin&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</code><i class="fab fa-google fa-2x fa-spin" aria-hidden="true"></i> 使用fa-spin来让图标进行旋转</p>
<h2 id="特殊引用效果"><a href="#特殊引用效果" class="headerlink" title="特殊引用效果"></a>特殊引用效果</h2><p><code>&lt;i class=&quot;fab fa-google fa-3x fa-pull-left fa-border&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</code></p>
<p><i class="fa fa-quote-left fa-2x fa-pull-left fa-border" aria-hidden="true"></i>…独坐在路边街角 冷风吹醒，默默地伴着我的孤影，只想将结他紧抱，诉出辛酸，就在这刻想起往事，心中一股冲劲勇闯，抛开那现实没有顾虑，仿佛身边拥有一切，看似与别人筑起隔膜。</p>
<p>在这里使用 <code>fa-border</code> 和 <code>fa-pull-right</code> 或 <code>fa-pull-left</code> 可以轻易构造出引用的特殊效果。</p>
<h2 id="替换无序列表中的图标"><a href="#替换无序列表中的图标" class="headerlink" title="替换无序列表中的图标"></a>替换无序列表中的图标</h2><p>使用 <code>fa-ul</code> and <code>fa-li</code> 轻松的替换无序列表中的默认图标。</p>
<pre><code>&lt;ul class=&quot;fa-ul&quot;&gt;
    &lt;li&gt;&lt;i class=&quot;fa-li fa fa-check-square&quot;&gt;&lt;/i&gt;使用列表类图标&lt;/li&gt;
    &lt;li&gt;&lt;i class=&quot;fa-li fa fa-check-square&quot;&gt;&lt;/i&gt;轻松的替换&lt;/li&gt;
    &lt;li&gt;&lt;i class=&quot;fa-li fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;无序列表&lt;/li&gt;
    &lt;li&gt;&lt;i class=&quot;fa-li fa fa-square&quot;&gt;&lt;/i&gt;中的默认图标&lt;/li&gt;
&lt;/ul&gt;</code></pre><ul class="fa-ul">
  <li><i class="fa-li fa fa-check-square"></i>使用列表类图标</li>
  <li><i class="fa-li fa fa-check-square"></i>轻松的替换</li>
  <li><i class="fa-li fa fa-spinner fa-spin"></i>无序列表</li>
  <li><i class="fa-li fa fa-square"></i>中的默认图标</li>
</ul>

<h2 id="对图标旋转角度"><a href="#对图标旋转角度" class="headerlink" title="对图标旋转角度"></a>对图标旋转角度</h2><p>使用 <code>fa-rotate-*</code> and <code>fa-flip-*</code> 类</p>
<pre><code>&lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt; normal&lt;br&gt;
&lt;i class=&quot;fa fa-quote-left fa-rotate-90&quot;&gt;&lt;/i&gt; fa-rotate-90&lt;br&gt;
&lt;i class=&quot;fa fa-quote-left fa-rotate-180&quot;&gt;&lt;/i&gt; fa-rotate-180&lt;br&gt;
&lt;i class=&quot;fa fa-quote-left fa-rotate-270&quot;&gt;&lt;/i&gt; fa-rotate-270&lt;br&gt;
&lt;i class=&quot;fa fa-quote-left fa-flip-horizontal&quot;&gt;&lt;/i&gt; fa-flip-horizontal&lt;br&gt;
&lt;i class=&quot;fa fa-quote-left fa-flip-vertical&quot;&gt;&lt;/i&gt; fa-flip-vertical
&lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt; normal&lt;br&gt;</code></pre><p><i class="fa fa-quote-left fa-rotate-90"></i> fa-rotate-90<br><br><i class="fa fa-quote-left fa-rotate-180"></i> fa-rotate-180<br><br><i class="fa fa-quote-left fa-rotate-270"></i> fa-rotate-270<br><br><i class="fa fa-quote-left fa-flip-horizontal"></i> fa-flip-horizontal<br><br><i class="fa fa-quote-left fa-flip-vertical"></i> fa-flip-vertical</p>
<h1 id="更多例子请看font-awesome样例"><a href="#更多例子请看font-awesome样例" class="headerlink" title="更多例子请看font-awesome样例"></a>更多例子请看<i class="fa fa-angle-double-right" aria-hidden="true"></i><i class="fa fa-angle-double-right" aria-hidden="true"></i><i class="fa fa-angle-double-right" aria-hidden="true"></i><i class="fa fa-angle-double-right" aria-hidden="true"></i><i class="fab fa-fort-awesome"></i><a href="http://www.fontawesome.com.cn/examples/" target="_blank" rel="noopener">font-awesome样例</a></h1><head> 
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script> 
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script> 
</head> 
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">]]></content>
      <categories>
        <category>Mardown</category>
      </categories>
  </entry>
  <entry>
    <title>唠叨唠叨——理发</title>
    <url>/2020/07/16/%E6%97%A0%E8%B5%96%E5%94%A0%E5%8F%A81/</url>
    <content><![CDATA[<p><font face='宋体' size=4>&emsp;&emsp;昨天去校外理发的时候发生了一件以前只是经常听说但是没亲眼见过的事情，<a id="more"></a>哈哈哈，其实就是一个顾客因为理发店擅自更改了会员卡的使用方式而要求退卡。<br><br>&emsp;&emsp;但我觉得今年疫情比较特殊，理发店可能经营有点困难，毕竟将近半年没什么生意，也就接受了。但是从这次这家理发店对会员卡制的处理不恰当来看，多年以来的这类问题还再不断的上演。在我本科的时候，学校内就发生过好几次理发店让学生办了会员卡之后，下个学期换老板了，或者关门了。学生也有组织起来维权，但要是每一次顾客的利益都没法得到保障，理发行业的名声就只能越来越差，大家也越来越难挣钱了，说到底还是一个信誉的问题。<br><br>&emsp;&emsp;按我的想法，理发店如果确实因为外界不可抗因素而做出违背当时签订会员卡时候的承诺，大可实实在在的讲出来。但今天我听理发店员工一个劲在说就付10块钱嘛；当时办卡我也不清楚；这是老板说的···这么说只能找来顾客的反感，一个劲的把自己的责任撇干净，而不去兑现自己的承诺。结果就是，员工也免去了这个顾客的费用···<br><br>&emsp;&emsp;第二，提前告知；如果做不到线上联系到每位顾客，那也要想办法在主要路口张贴公告。其实这里也提醒，做好运营重要性，如果理发店能有那么一个微信群、QQ群，能及时和学生联系，定期搞一个活动来增加收入，遇到这次问题还能一起沟通协商。但做了这些，其实还需要提供一个补偿选择，给顾客一定的实惠。很少有学生能真真正正的把卡里400用完，像我都是借同学的卡。如果能退剩余余额的一小部分钱，对学生群体来说也是可以接受的，重点是展示自己的诚意。<br><br>&emsp;&emsp;第三，就目前这种环境来看，还是不要去办卡比较好。顾客权益保障太不全了，难以维权。<br><br>&emsp;&emsp;就唠叨这么多吧，以后多写一些生活类的。</p>
</font>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现列表排序</title>
    <url>/2020/07/16/%E7%94%A8Python%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="一、-快速排序"><a href="#一、-快速排序" class="headerlink" title="一、 快速排序"></a>一、 快速排序</h2><h3 id="1-算法原理"><a href="#1-算法原理" class="headerlink" title="1.  算法原理"></a>1.  算法原理</h3><p> <i class="fa fa-quote-left fa-2x fa-pull-left fa-border"></i><font face="楷体" size=4>快速排序首先要在数组中选择一个基准元素，<a id="more"></a>以此为基准将数组分为 左边全部小于基准元素，右边全部大于基准元素。</p>
<p>&emsp;&emsp;算法的步骤：</p>
<p>&emsp;&emsp;1. 选取数组第一个元素为基准元素:first = nums[0]。</p>
<p>&emsp;&emsp;2. 从第二个元素开始for i 循环:</p>
<p>&emsp;&emsp;&emsp;&emsp;当遇到 i &lt; mid，将i元素放入右边数组中，right.append(i)</p>
<p>&emsp;&emsp;&emsp;&emsp;当遇到 i &gt;= mid，将i元素放入左边数组中，left.append(i)</p>
<p>&emsp;&emsp;3.递归进行第2步骤，对left和right数组进行相同操作，从无序变成有序。</font></p>
<h3 id="2-Python-3-代码实现"><a href="#2-Python-3-代码实现" class="headerlink" title="2. Python 3 代码实现"></a>2. Python 3 代码实现</h3><pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">快读排序</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> arr ==[]:</span><br><span class="line">		<span class="keyword">return</span> []</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		mid = arr[<span class="number">0</span>]                                      <span class="comment"># 取第一个元素作为基准元素</span></span><br><span class="line">		left ,right = [], []</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:]:</span><br><span class="line">			<span class="keyword">if</span> i &lt; mid:</span><br><span class="line">				right.append(i)</span><br><span class="line">			<span class="keyword">if</span> i &gt;= mid:</span><br><span class="line">				left.append(i)</span><br><span class="line">	res =  quick_sort(left) + [mid] + quick_sort(right)  <span class="comment"># 递归处理</span></span><br><span class="line">	<span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></code></pre><h3 id="3-复杂度"><a href="#3-复杂度" class="headerlink" title="3.复杂度"></a>3.复杂度</h3><p>快速排序的平均时间复杂度是<code>O(nlogn)</code>，空间复杂度是<code>O(nlog2n)</code>；不稳定。</p>
<h2 id="二、-冒泡排序"><a href="#二、-冒泡排序" class="headerlink" title="二、 冒泡排序"></a>二、 冒泡排序</h2><h3 id="1-算法原理-1"><a href="#1-算法原理-1" class="headerlink" title="1.  算法原理"></a>1.  算法原理</h3><p> <i class="fa fa-quote-left fa-2x fa-pull-left fa-border"></i><font face="楷体" size=4>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端</p>
<p>&emsp;&emsp;算法的步骤：</p>
<p>&emsp;&emsp;1. 从左往右开始，依次循环。</p>
<p>&emsp;&emsp;2. 比较当前元素与后一个元素的大小:</p>
<p>&emsp;&emsp;3. 如果当前元素小于后一个元素，则两元素位置进行交换。</p>
<p>&emsp;&emsp;4. 重复上述步骤到最后一个元素，至此这一轮排序结束。</p>
<p>&emsp;&emsp;5. 递归上述步骤，当外层循环到最后一个元素的时候即结束运行。</font></p>
<h3 id="2-Python-3-代码实现-1"><a href="#2-Python-3-代码实现-1" class="headerlink" title="2. Python 3 代码实现"></a>2. Python 3 代码实现</h3><pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">冒泡排序</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nums ==[]:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; nums[j+<span class="number">1</span>]:</span><br><span class="line">                nums[j] ,nums[j+<span class="number">1</span>]= nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure></code></pre><h3 id="3-复杂度-1"><a href="#3-复杂度-1" class="headerlink" title="3.复杂度"></a>3.复杂度</h3><p>快速排序的平均时间复杂度是<code>O(n2)</code>，空间复杂度是<code>O(1)</code>；稳定。</p>
<h2 id="三、-选择排序"><a href="#三、-选择排序" class="headerlink" title="三、 选择排序"></a>三、 选择排序</h2><h3 id="1-算法原理-2"><a href="#1-算法原理-2" class="headerlink" title="1.  算法原理"></a>1.  算法原理</h3><p> <i class="fa fa-quote-left fa-2x fa-pull-left fa-border"></i><font face="楷体" size=4>每次从待排序的列表中选择第一位元素作为基准比较元素，再从待排序列表中选出最小（或最大）一个元素，将其存放在该列表中的起始位置。和冒泡排序的不同之处是，选择排序每轮只交换一次，而冒泡排序需要交换很多次。</p>
<p>&emsp;&emsp;算法的步骤：</p>
<p>&emsp;&emsp;1. 开始时选择列表中第一个元素作为基准比较元素，后面的元素都是待排序元素。</p>
<p>&emsp;&emsp;2. 一次比较待排序元素与基准比较元素的大小。</p>
<p>&emsp;&emsp;3. 找到最小（最大）元素，然后交换基准比较元素和该最小（最大）元素的位置，至此一轮结束。</p>
<p>&emsp;&emsp;4. 重复上述步骤到最后待排序列表为空时停止。<br></font></p>
<h3 id="2-Python-3-代码实现-2"><a href="#2-Python-3-代码实现-2" class="headerlink" title="2. Python 3 代码实现"></a>2. Python 3 代码实现</h3><pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">选择排序</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> nums == []:</span><br><span class="line">		<span class="keyword">return</span> nums</span><br><span class="line">	n=len(nums)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n<span class="number">-1</span>):</span><br><span class="line">		min_index = i</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n):</span><br><span class="line">			<span class="keyword">if</span> nums[j] &gt; nums[min_index]:</span><br><span class="line">				min_index = j</span><br><span class="line">		nums[i], nums[min_index] = nums[min_index], nums[i]</span><br><span class="line">	<span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure></code></pre><h3 id="3-复杂度-2"><a href="#3-复杂度-2" class="headerlink" title="3.复杂度"></a>3.复杂度</h3><p>快速排序的平均时间复杂度是<code>O(n2)</code>，空间复杂度是<code>O(1)</code>；不稳定。</p>
<head> 
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script> 
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script> 
</head> 
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>列表排序</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
